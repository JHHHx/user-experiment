[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "pooling",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "init_db_pool",
        "kind": 2,
        "importPath": "back.server",
        "description": "back.server",
        "peekOfCode": "def init_db_pool():\n    \"\"\"初始化数据库连接池\"\"\"\n    global db_pool\n    try:\n        # 尝试从环境变量获取数据库配置\n        db_config = {\n            'host': os.environ.get('DB_HOST', 'localhost'),\n            'user': os.environ.get('DB_USER', 'root'),\n            'password': os.environ.get('DB_PASSWORD', ''),\n            'database': os.environ.get('DB_NAME', 'user_experiment'),",
        "detail": "back.server",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "back.server",
        "description": "back.server",
        "peekOfCode": "def get_db_connection():\n    \"\"\"从连接池获取数据库连接\"\"\"\n    if db_pool:\n        return db_pool.get_connection()\n    else:\n        # 如果连接池不可用，使用传统连接方式\n        try:\n            db_config = {\n                'host': os.environ.get('DB_HOST', 'localhost'),\n                'user': os.environ.get('DB_USER', 'root'),",
        "detail": "back.server",
        "documentation": {}
    },
    {
        "label": "get_or_create_user_id",
        "kind": 2,
        "importPath": "back.server",
        "description": "back.server",
        "peekOfCode": "def get_or_create_user_id():\n    \"\"\"从请求中获取用户ID，如果不存在则创建新的\"\"\"\n    user_id = request.headers.get('X-User-ID')\n    if not user_id:\n        user_id = str(uuid.uuid4())\n    return user_id\n@app.route('/submit', methods=['POST'])\ndef submit():\n    try:\n        data = request.json",
        "detail": "back.server",
        "documentation": {}
    },
    {
        "label": "submit",
        "kind": 2,
        "importPath": "back.server",
        "description": "back.server",
        "peekOfCode": "def submit():\n    try:\n        data = request.json\n        content = data.get('content')\n        page = data.get('page')\n        user_id = get_or_create_user_id()\n        # print(f\"收到提交请求:\")\n        # print(f\"  页面: {page}\")\n        # print(f\"  用户ID: {user_id}\")\n        # print(f\"  内容: {content}\")",
        "detail": "back.server",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "back.server",
        "description": "back.server",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, origins=['*'])\n# 调试模式\nDEBUG_MODE = False\n# 数据库连接池配置\ndb_pool = None\ndef init_db_pool():\n    \"\"\"初始化数据库连接池\"\"\"\n    global db_pool\n    try:",
        "detail": "back.server",
        "documentation": {}
    },
    {
        "label": "DEBUG_MODE",
        "kind": 5,
        "importPath": "back.server",
        "description": "back.server",
        "peekOfCode": "DEBUG_MODE = False\n# 数据库连接池配置\ndb_pool = None\ndef init_db_pool():\n    \"\"\"初始化数据库连接池\"\"\"\n    global db_pool\n    try:\n        # 尝试从环境变量获取数据库配置\n        db_config = {\n            'host': os.environ.get('DB_HOST', 'localhost'),",
        "detail": "back.server",
        "documentation": {}
    },
    {
        "label": "db_pool",
        "kind": 5,
        "importPath": "back.server",
        "description": "back.server",
        "peekOfCode": "db_pool = None\ndef init_db_pool():\n    \"\"\"初始化数据库连接池\"\"\"\n    global db_pool\n    try:\n        # 尝试从环境变量获取数据库配置\n        db_config = {\n            'host': os.environ.get('DB_HOST', 'localhost'),\n            'user': os.environ.get('DB_USER', 'root'),\n            'password': os.environ.get('DB_PASSWORD', ''),",
        "detail": "back.server",
        "documentation": {}
    }
]